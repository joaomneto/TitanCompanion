import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    ext.kotlin_version = '1.3.41'
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven{
            url'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.0-beta01'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.triplet.gradle:play-publisher:2.3.0'
        classpath 'com.amazonaws:aws-devicefarm-gradle-plugin:1.2'
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:9.0.0'
    }
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
if (project.hasProperty('SERVICE_ACCOUNT_EMAIL')) {
    apply plugin: 'com.github.triplet.play'
}

dependencies {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'commons-io:commons-io:2.6'
    implementation 'androidx.core:core-ktx:1.1.0'
    testImplementation('org.robolectric:robolectric:4.3'){
        exclude group: 'org.bouncycastle'
    }
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.52'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'junit:junit:4.12'
    testImplementation "io.mockk:mockk:1.9.3"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'

}

android {
    compileSdkVersion 29
    dataBinding {
        enabled = true
    }

    if (project.hasProperty('RELEASE_STORE_FILE')) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
        if (project.hasProperty('RELEASE_STORE_FILE')) {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest.java.srcDir 'src/androidTest/java'
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

if (project.hasProperty('SERVICE_ACCOUNT_EMAIL')) {
    play {
        track = 'beta'
        serviceAccountEmail = SERVICE_ACCOUNT_EMAIL
        serviceAccountCredentials = file(SERVICE_ACCOUNT_SECRET_FILE)
    }
}

repositories {
    mavenCentral()
    google()
}

task(versionFromManifest) {
    doLast {
        def manifest = new XmlSlurper().parseText(new File('AndroidManifest.xml').text)
        def version = manifest['@android:versionName']
        println version
    }
}

task(prepareRelease) {
    doLast {
        def branch = ['sh', '-c', 'git rev-parse --abbrev-ref HEAD'].execute().text.trim()

        if (branch == 'master') {
            throw new IllegalStateException("Cannot prepare release while on master.")
        }

        def diff = ['sh', '-c', 'git diff --numstat origin/master -- src/main/play'].execute().text.trim()
        def filesChanged = diff.split('\n').collect { it.split('\t')[2].trim() }
        def missingModifications = [
                'src/main/play/en-GB/whatsnew',
                'src/main/play/fr-FR/whatsnew',
                'src/main/play/pt-PT/whatsnew',
                'src/main/play/pt-BR/whatsnew'
        ] - filesChanged

        if (missingModifications.empty) {
            def manifest = new XmlSlurper().parseText(new File('AndroidManifest.xml').text)
            def version = manifest['@android:versionName']
            def versionNumber = manifest['@android:versionCode']
            def stdout = new ByteArrayOutputStream()

            def newVersion = "v${versionNumber.toInteger() + 1}-beta"
            ant.replace(file: "AndroidManifest.xml", token: "android:versionCode=\"${versionNumber}\"", value: "android:versionCode=\"${versionNumber.toInteger() + 1}\"")
            ant.replace(file: "AndroidManifest.xml", token: "android:versionName=\"${version}\"", value: "android:versionName=\"${newVersion}\"")

            println "Adding a commit with the new Manifest file for release..."
            exec {
                commandLine "git", "commit", "-a", "-m", "'Release ${newVersion}'"
                standardOutput stdout
            }
            print stdout

            exec {
                commandLine "git", "push", "origin"
                standardOutput stdout
            }
            print stdout


            new File("pr_temp_file").text = """Release ${newVersion}\n\n${
                new File('src/main/play/en-GB/whatsnew').text
            }"""
            println "Opening pull request..."
            exec {
                commandLine "hub", "pull-request", "-F", "pr_temp_file"
                standardOutput stdout
            }

            exec {
                commandLine "rm", "-rf", "pr_temp_file"
                standardOutput stdout
            }

        } else {
            throw new IllegalStateException("Missing modifications to release notes ${missingModifications}")
        }
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
        }
        info.events = debug.events
        info.showExceptions = true

        exceptionFormat = TestExceptionFormat.FULL

        afterSuite { desc, result ->
            if (!desc.parent) {
                println('-----------')
                println("${result.resultType}")
                println("Total: ${result.testCount}")
                println("Passed: ${result.successfulTestCount}")
                println("Failed: ${result.failedTestCount}")
                println("Skiped: ${result.skippedTestCount}")
                println('-----------')
            }
        }
    }
}

ktlint {
    version = "0.34.2"
    verbose = true
    android = false
    outputToConsole = true
    ignoreFailures = true
    enableExperimentalRules = true
}
